generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String   @id @default(uuid())
  clients  Client[]
  invoices Invoice[]
  Profile  Profile?
}

model Profile {
  id              String   @id @default(uuid())
  full_name       String
  email           String   @unique
  phone_number    String?
  business_name   String?
  logo_url        String?
  contact_info    Json?
  payment_details Json?
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt
  User            User     @relation(fields: [id], references: [id])
}

model Client {
  id              String    @id @default(uuid())
  user_id         String
  name            String
  whatsapp_number String
  email           String?
  address         String?
  notes           String?
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime  @default(now()) @db.Timestamptz(6)
  user            User      @relation(fields: [user_id], references: [id])
  invoices        Invoice[]
}

model Invoice {
  id             String             @id @default(uuid())
  user_id        String
  client_id      String
  invoice_number String
  issue_date     DateTime           @default(now()) @db.Timestamptz(6)
  due_date       DateTime           @db.Timestamptz(6)
  subtotal       Decimal            @db.Decimal(12, 2)
  tax_rate       Decimal?           @db.Decimal(5, 2)
  tax_amount     Decimal?           @db.Decimal(12, 2)
  discount       Decimal?           @db.Decimal(12, 2)
  total          Decimal            @db.Decimal(12, 2)
  notes          String?
  status         InvoiceStatus      @default(DRAFT)
  pdf_url        String?
  payment_link   String?
  created_at     DateTime           @default(now()) @db.Timestamptz(6)
  updated_at     DateTime           @db.Timestamptz(6)
  logs           CommunicationLog[]
  client         Client             @relation(fields: [client_id], references: [id])
  user           User               @relation(fields: [user_id], references: [id])
  items          InvoiceItem[]
}

model InvoiceItem {
  id          String   @id @default(uuid())
  invoice_id  String
  description String
  quantity    Decimal  @db.Decimal(10, 2)
  price       Decimal  @db.Decimal(12, 2)
  amount      Decimal  @db.Decimal(12, 2)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  invoice     Invoice  @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
}

model CommunicationLog {
  id         String   @id @default(uuid())
  invoice_id String?
  type       String
  status     String
  message    String?
  timestamp  DateTime @default(now()) @db.Timestamptz(6)
  invoice    Invoice? @relation(fields: [invoice_id], references: [id])
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
}




